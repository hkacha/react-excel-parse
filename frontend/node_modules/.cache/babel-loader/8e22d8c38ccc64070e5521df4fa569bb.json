{"ast":null,"code":"var _jsxFileName = \"/home/hardik/Code/nilkanthsolutions/react-excel-parse/frontend/src/context/FilterContext.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, createContext } from \"react\";\nimport { read, utils } from \"xlsx\";\nimport XLFile from \"../data/data.xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FilterContext = /*#__PURE__*/createContext();\n\n// import XLFile from \"../data/data.xlsx\";\n\nconst FilterProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [result, setResult] = useState([]);\n  const [filterList, setFilterList] = useState({\n    PART_NAME_EN: [],\n    PSBUILDING_NAME_EN: [],\n    SECTION_NAME_EN: [],\n    FM_NAME_EN: [],\n    LASTNAME_EN: [],\n    GENDER: [],\n    AGE: {\n      min: 0,\n      max: 0\n    },\n    PIN_CODE: []\n  });\n  const [selectedFilter, setSelectedFilter] = useState({\n    PART_NAME_EN: [],\n    PSBUILDING_NAME_EN: [],\n    SECTION_NAME_EN: [],\n    FM_NAME_EN: [],\n    LASTNAME_EN: [],\n    GENDER: [],\n    PIN_CODE: []\n  });\n  const [isFiltered, setIsFiltered] = useState(0);\n  const handleSetFilter = () => {\n    return;\n  };\n  const handleCreateFilter = e => {\n    let fieldName = e.target.name;\n    let fieldValue = e.target.value;\n    if (e.target.checked) {\n      setSelectedFilter({\n        ...selectedFilter,\n        [fieldName]: [...selectedFilter[fieldName], fieldValue]\n      });\n      setIsFiltered(isFiltered + 1);\n      filterValue(selectedFilter);\n    } else {\n      let filterData = selectedFilter[fieldName].filter(item => {\n        return item !== fieldValue;\n      });\n      setSelectedFilter({\n        ...selectedFilter,\n        [fieldName]: filterData\n      });\n      setIsFiltered(isFiltered - 1);\n      filterValue(selectedFilter);\n    }\n  };\n  const getData = async () => {\n    const file = await (await fetch(XLFile)).arrayBuffer();\n    const wb = read(file);\n    const ws = wb.Sheets[wb.SheetNames[0]];\n    const data = utils.sheet_to_json(ws);\n    setResult(data);\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(FilterContext.Provider, {\n    value: {\n      result,\n      filterList,\n      isFiltered,\n      selectedFilter,\n      handleSetFilter,\n      handleCreateFilter\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n};\n_s(FilterProvider, \"bhBN7QuvGp8VonmDE5eLIB6UT3A=\");\n_c = FilterProvider;\nexport default FilterProvider;\nvar _c;\n$RefreshReg$(_c, \"FilterProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","read","utils","XLFile","FilterContext","FilterProvider","children","result","setResult","filterList","setFilterList","PART_NAME_EN","PSBUILDING_NAME_EN","SECTION_NAME_EN","FM_NAME_EN","LASTNAME_EN","GENDER","AGE","min","max","PIN_CODE","selectedFilter","setSelectedFilter","isFiltered","setIsFiltered","handleSetFilter","handleCreateFilter","e","fieldName","target","name","fieldValue","value","checked","filterValue","filterData","filter","item","getData","file","fetch","arrayBuffer","wb","ws","Sheets","SheetNames","data","sheet_to_json"],"sources":["/home/hardik/Code/nilkanthsolutions/react-excel-parse/frontend/src/context/FilterContext.js"],"sourcesContent":["import { useState, useEffect, createContext } from \"react\";\nimport { read, utils } from \"xlsx\";\nimport XLFile from \"../data/data.xlsx\";\n\nexport const FilterContext = createContext();\n\n// import XLFile from \"../data/data.xlsx\";\n\nconst FilterProvider = ({ children }) => {\n\tconst [result, setResult] = useState([]);\n\tconst [filterList, setFilterList] = useState({\n\t\tPART_NAME_EN: [],\n\t\tPSBUILDING_NAME_EN: [],\n\t\tSECTION_NAME_EN: [],\n\t\tFM_NAME_EN: [],\n\t\tLASTNAME_EN: [],\n\t\tGENDER: [],\n\t\tAGE: { min: 0, max: 0 },\n\t\tPIN_CODE: [],\n\t});\n\n\tconst [selectedFilter, setSelectedFilter] = useState({\n\t\tPART_NAME_EN: [],\n\t\tPSBUILDING_NAME_EN: [],\n\t\tSECTION_NAME_EN: [],\n\t\tFM_NAME_EN: [],\n\t\tLASTNAME_EN: [],\n\t\tGENDER: [],\n\t\tPIN_CODE: [],\n\t});\n\n\tconst [isFiltered, setIsFiltered] = useState(0);\n\n\tconst handleSetFilter = () => {\n\t\treturn;\n\t};\n\n\tconst handleCreateFilter = (e) => {\n\t\tlet fieldName = e.target.name;\n\t\tlet fieldValue = e.target.value;\n\n\t\tif (e.target.checked) {\n\t\t\tsetSelectedFilter({\n\t\t\t\t...selectedFilter,\n\t\t\t\t[fieldName]: [...selectedFilter[fieldName], fieldValue],\n\t\t\t});\n\t\t\tsetIsFiltered(isFiltered + 1);\n\t\t\tfilterValue(selectedFilter);\n\t\t} else {\n\t\t\tlet filterData = selectedFilter[fieldName].filter((item) => {\n\t\t\t\treturn item !== fieldValue;\n\t\t\t});\n\t\t\tsetSelectedFilter({\n\t\t\t\t...selectedFilter,\n\t\t\t\t[fieldName]: filterData,\n\t\t\t});\n\t\t\tsetIsFiltered(isFiltered - 1);\n\t\t\tfilterValue(selectedFilter);\n\t\t}\n\t};\n\n\tconst getData = async () => {\n\t\tconst file = await (await fetch(XLFile)).arrayBuffer();\n\t\tconst wb = read(file);\n\t\tconst ws = wb.Sheets[wb.SheetNames[0]];\n\t\tconst data = utils.sheet_to_json(ws);\n\t\tsetResult(data);\n\t};\n\n\tuseEffect(() => {\n\t\tgetData();\n\t}, []);\n\n\treturn (\n\t\t<FilterContext.Provider\n\t\t\tvalue={{\n\t\t\t\tresult,\n\t\t\t\tfilterList,\n\t\t\t\tisFiltered,\n\t\t\t\tselectedFilter,\n\t\t\t\thandleSetFilter,\n\t\t\t\thandleCreateFilter,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</FilterContext.Provider>\n\t);\n};\n\nexport default FilterProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/hardik/Code/nilkanthsolutions/react-excel-parse/frontend/src/context/FilterContext.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, createContext, useCallback } from \"react\";\nimport { read, utils, writeFileXLSX } from \"xlsx\";\nimport XLFile from \"../data/data.xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FilterContext = /*#__PURE__*/createContext();\n\n// import XLFile from \"../data/data.xlsx\";\n\nconst FilterProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [result, setResult] = useState([]);\n  const [filteredData, setfilteredData] = useState(initialState);\n  const [filterList, setFilterList] = useState({\n    PART_NAME_EN: [],\n    PSBUILDING_NAME_EN: [],\n    SECTION_NAME_EN: [],\n    FM_NAME_EN: [],\n    LASTNAME_EN: [],\n    GENDER: [],\n    AGE: [{\n      min: 0,\n      max: 0\n    }],\n    PIN_CODE: []\n  });\n  const [selectedFilter, setSelectedFilter] = useState({\n    PART_NAME_EN: [],\n    PSBUILDING_NAME_EN: [],\n    SECTION_NAME_EN: [],\n    FM_NAME_EN: [],\n    LASTNAME_EN: [],\n    GENDER: [],\n    PIN_CODE: []\n  });\n  const [isFiltered, setIsFiltered] = useState(0);\n  const handleSetFilter = () => {\n    return;\n  };\n  const applyFilter = (data, filters) => {\n    const filterKeys = Object.keys(filters);\n    // filters all elements passing the criteria\n    let abc = data.filter(item => {\n      // dynamically validate all filter criteria\n      return filterKeys.every(key => {\n        // ignores an empty filter\n        if (!filters[key].length) return true;\n        return filters[key].includes(item[key]);\n      });\n    });\n  };\n  const exportFile = useCallback(() => {\n    const ws = utils.json_to_sheet(newData);\n    const wb = utils.book_new();\n    utils.book_append_sheet(wb, ws, \"Data\");\n    writeFileXLSX(wb, \"new-user.xlsx\");\n  }, [newData]);\n  const handleCreateFilter = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const isChecked = e.target.checked;\n    if (isChecked) {\n      setSelectedFilter({\n        ...selectedFilter,\n        [fieldName]: [...selectedFilter[fieldName], fieldValue]\n      });\n      setIsFiltered(isFiltered + 1);\n    } else {\n      let filterData = selectedFilter[fieldName].filter(item => {\n        return item !== fieldValue;\n      });\n      setSelectedFilter({\n        ...selectedFilter,\n        [fieldName]: filterData\n      });\n      setIsFiltered(isFiltered - 1);\n    }\n  };\n  const getData = async () => {\n    const file = await (await fetch(XLFile)).arrayBuffer();\n    const wb = read(file);\n    const ws = wb.Sheets[wb.SheetNames[0]];\n    const data = utils.sheet_to_json(ws);\n    setResult(data);\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(FilterContext.Provider, {\n    value: {\n      result,\n      filterList,\n      isFiltered,\n      selectedFilter,\n      handleSetFilter,\n      handleCreateFilter\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }, this);\n};\n_s(FilterProvider, \"CvsTDj67JtE+qjAvQXqVBCMdRIM=\");\n_c = FilterProvider;\nexport default FilterProvider;\nvar _c;\n$RefreshReg$(_c, \"FilterProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useCallback","read","utils","writeFileXLSX","XLFile","FilterContext","FilterProvider","children","result","setResult","filteredData","setfilteredData","initialState","filterList","setFilterList","PART_NAME_EN","PSBUILDING_NAME_EN","SECTION_NAME_EN","FM_NAME_EN","LASTNAME_EN","GENDER","AGE","min","max","PIN_CODE","selectedFilter","setSelectedFilter","isFiltered","setIsFiltered","handleSetFilter","applyFilter","data","filters","filterKeys","Object","keys","abc","filter","item","every","key","length","includes","exportFile","ws","json_to_sheet","newData","wb","book_new","book_append_sheet","handleCreateFilter","e","fieldName","target","name","fieldValue","value","isChecked","checked","filterData","getData","file","fetch","arrayBuffer","Sheets","SheetNames","sheet_to_json"],"sources":["/home/hardik/Code/nilkanthsolutions/react-excel-parse/frontend/src/context/FilterContext.js"],"sourcesContent":["import { useState, useEffect, createContext, useCallback } from \"react\";\nimport { read, utils, writeFileXLSX } from \"xlsx\";\n\nimport XLFile from \"../data/data.xlsx\";\n\nexport const FilterContext = createContext();\n\n// import XLFile from \"../data/data.xlsx\";\n\nconst FilterProvider = ({ children }) => {\n\tconst [result, setResult] = useState([]);\n\tconst [filteredData, setfilteredData] = useState(initialState);\n\tconst [filterList, setFilterList] = useState({\n\t\tPART_NAME_EN: [],\n\t\tPSBUILDING_NAME_EN: [],\n\t\tSECTION_NAME_EN: [],\n\t\tFM_NAME_EN: [],\n\t\tLASTNAME_EN: [],\n\t\tGENDER: [],\n\t\tAGE: [{ min: 0, max: 0 }],\n\t\tPIN_CODE: [],\n\t});\n\n\tconst [selectedFilter, setSelectedFilter] = useState({\n\t\tPART_NAME_EN: [],\n\t\tPSBUILDING_NAME_EN: [],\n\t\tSECTION_NAME_EN: [],\n\t\tFM_NAME_EN: [],\n\t\tLASTNAME_EN: [],\n\t\tGENDER: [],\n\t\tPIN_CODE: [],\n\t});\n\n\tconst [isFiltered, setIsFiltered] = useState(0);\n\n\tconst handleSetFilter = () => {\n\t\treturn;\n\t};\n\n\tconst applyFilter = (data, filters) => {\n\t\tconst filterKeys = Object.keys(filters);\n\t\t// filters all elements passing the criteria\n\t\tlet abc = data.filter((item) => {\n\t\t\t// dynamically validate all filter criteria\n\t\t\treturn filterKeys.every((key) => {\n\t\t\t\t// ignores an empty filter\n\t\t\t\tif (!filters[key].length) return true;\n\t\t\t\treturn filters[key].includes(item[key]);\n\t\t\t});\n\t\t});\n\t};\n\n\tconst exportFile = useCallback(() => {\n\t\tconst ws = utils.json_to_sheet(newData);\n\t\tconst wb = utils.book_new();\n\t\tutils.book_append_sheet(wb, ws, \"Data\");\n\t\twriteFileXLSX(wb, \"new-user.xlsx\");\n\t}, [newData]);\n\n\tconst handleCreateFilter = (e) => {\n\t\tconst fieldName = e.target.name;\n\t\tconst fieldValue = e.target.value;\n\t\tconst isChecked = e.target.checked;\n\n\t\tif (isChecked) {\n\t\t\tsetSelectedFilter({\n\t\t\t\t...selectedFilter,\n\t\t\t\t[fieldName]: [...selectedFilter[fieldName], fieldValue],\n\t\t\t});\n\t\t\tsetIsFiltered(isFiltered + 1);\n\t\t} else {\n\t\t\tlet filterData = selectedFilter[fieldName].filter((item) => {\n\t\t\t\treturn item !== fieldValue;\n\t\t\t});\n\t\t\tsetSelectedFilter({\n\t\t\t\t...selectedFilter,\n\t\t\t\t[fieldName]: filterData,\n\t\t\t});\n\t\t\tsetIsFiltered(isFiltered - 1);\n\t\t}\n\t};\n\n\tconst getData = async () => {\n\t\tconst file = await (await fetch(XLFile)).arrayBuffer();\n\t\tconst wb = read(file);\n\t\tconst ws = wb.Sheets[wb.SheetNames[0]];\n\t\tconst data = utils.sheet_to_json(ws);\n\t\tsetResult(data);\n\t};\n\n\tuseEffect(() => {\n\t\tgetData();\n\t}, []);\n\n\treturn (\n\t\t<FilterContext.Provider\n\t\t\tvalue={{\n\t\t\t\tresult,\n\t\t\t\tfilterList,\n\t\t\t\tisFiltered,\n\t\t\t\tselectedFilter,\n\t\t\t\thandleSetFilter,\n\t\t\t\thandleCreateFilter,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</FilterContext.Provider>\n\t);\n};\n\nexport default FilterProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
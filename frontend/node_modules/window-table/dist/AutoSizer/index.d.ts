import * as React from 'react';
declare type Size = {
    height: number;
    width: number;
};
declare type Props = {
    onResize: (Size: Size) => void;
    innerElementType: any;
};
declare type State = {
    height: number;
    width: number;
};
declare type ResizeHandler = (element?: HTMLElement, onResize?: () => void) => void;
declare type DetectElementResize = {
    addResizeListener: ResizeHandler;
    removeResizeListener: ResizeHandler;
};
export default class AutoSizer extends React.PureComponent<Props, State> {
    static defaultProps: {
        onResize: () => void;
    };
    state: {
        height: number;
        width: number;
    };
    _parentNode?: HTMLElement;
    _autoSizer?: HTMLElement | any;
    _detectElementResize: DetectElementResize;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    _onResize: () => void;
    _setRef: (autoSizer?: HTMLElement | undefined) => void;
}
export {};
